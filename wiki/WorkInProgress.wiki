_"A tree is a tree. How many more do you have to look at?"_ -- Ronald Reagan

= Concurrent Trees =

This project provides implementations of concurrent [http://en.wikipedia.org/wiki/Radix_tree Radix Trees] and concurrent [http://en.wikipedia.org/wiki/Suffix_tree Suffix Trees] for Java.

A *Radix Tree* (also known as patricia trie, radix _trie_ or compact prefix tree) allows values to be associated with string keys (like a map) with the twist that values can be retrieved by supplying a _prefix_ of the key rather than the whole key. Radix trees can be used to:
  # Associate values with keys which have a natural _hierarchy_ (for example nested categories, or paths in a file system)
  # Scan documents for large numbers of keywords in a scalable way (i.e. faster than naively running document.contains("keyword") for every keyword)
  # Build indexes on documents (or associated objects) for subsequent retrieval via "starts with", "ends with" or "equals" queries

A *Suffix Tree* (also known as PAT tree or position tree) allows values to be associated with string keys (like a map) with the twist that values can be retrieved by supplying any _suffix_ of the key rather than the whole key. Suffix trees can be used to:
  # Build indexes on documents for subsequent retrieval via "ends with" or "contains" queries
  # Perform more complex analyses of collections of documents, such as finding common substrings

=== Concurrency Support===
All of the trees (data structures and algorithms) in this project are optimized for *high-concurrency and high performance reads*, and *low-concurrency or background writes*:
  * Reads are _lock-free_ (reading threads never block, even while writes are ongoing)
  * Reading threads always see a consistent _version_ of the tree
  * Reading threads do not block writing threads
  * Writing threads block each other but never block reading threads

As such reading threads should never encounter latency due to ongoing writes or other concurrent readers.

==Architecture==
All of the trees in this project (derivatives of the Radix Tree, the Suffix Tree, and derivatives of the Suffix Tree) are based on the implementation of the Concurrent Radix Tree.

The Concurrent Radix Tree is designed as follows:
  * Nodes are _mostly-immutable_
  * The characters for an incoming "edge" to a node (a reference from a parent node to a child node which has some characters of a key associated with it) are stored in the child node rather than a dedicated Edge object
  * The incoming edge to a node is immutable (the characters of an edge represented by a child node can never be changed in that child node)
  * The reference to a value associated with a node is immutable (if any)
  * The invariant of radix trees that no two outgoing edges from a node can share the same first character is strictly enforced:
    * The number of outgoing edges from a node is immutable
    * The only _mutable_ aspect of a node is that a reference to its child node for an _existing_ outgoing edge as identified by the first character of that edge, can be updated to point to a new child node, as long as the edge of the new child node starts with the same first character
  * Updating the child node reference for an existing edge is an atomic operation

