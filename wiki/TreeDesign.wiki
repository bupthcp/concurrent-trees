The design of trees in this project to support concurrent read/write access.

== Architecture and Concurrency Mechanism ==
All of the trees in this project (derivatives of the Radix Tree, the Suffix Tree, and derivatives of the Suffix Tree) are based on the implementation of the Concurrent Radix Tree.

The Concurrent Radix Tree supports lock-free reads while allowing concurrent writes, by _calculating the changes which would be made to the tree were it mutable_, and assembling those changes into a *patch*, which is then applied to the tree in a *single atomic operation*.

===Atomic updates by patching the tree===
Inserting an entry into Concurrent Radix Tree which requires an existing node within the tree to be split.
[http://concurrent-trees.googlecode.com/svn/wiki/images/tree-apply-patch.png]

Reading threads traversing the tree while the patch above is being applied, will either see the _old version_ or the _new version_ of the (sub-)tree, but both versions are consistent views of the tree, which preserve the invariants.

The node 'te' will be garbage collected when threads which are traversing the old version of the tree, finish traversing that version and release their reference to that node.

===Restrictions on Mutability===
To support atomicity of updates as above, nodes in the tree have the following restrictions in their design:
  * Nodes are _mostly-immutable_
  * The characters for an incoming "edge" to a node (a reference from a parent node to a child node which has some characters of a key associated with it) are stored in the child node rather than a dedicated Edge object
  * The incoming edge to a node is immutable (the characters of an edge represented by a child node can never be changed in that child node)
  * The reference to a value associated with a node, if any, is immutable
  * The invariant of radix trees that no two outgoing edges from a node can share the same first character is strictly enforced:
    * The number of outgoing edges from a node is immutable
    * The only _mutable_ aspect of a node is that a reference to its child node for an _existing_ outgoing edge as identified by the first character of that edge, can be updated to point to a new child node, as long as the edge of the new child node starts with the same first character
  * Updating the child node reference for an existing edge is an atomic operation

The restrictions above allow updates to be applied _*atomically*_ by applying a pre-assembled _*patch*_, and they also ensure that any patch to be applied to the tree, is itself fully formed and immutable.

Strictly speaking, some of the restrictions above are _not_ required for the atomicity aspect, but are in the design to reduce memory overhead, as discussed later.