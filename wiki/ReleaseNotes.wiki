#summary Release notes for official releases of the concurrent-trees library

===Version 2.0.0 - 2013-02-26===
 * Uses lazy evaluation for lower latency, lower CPU/memory usage, and better filtering support: see [http://code.google.com/p/concurrent-trees/wiki/FrequentlyAskedQuestions#What_is_Lazy_Evaluation,_and_why_return_Iterable_instead_of_Coll Frequently Asked Questions]
 * Minor API changes, example usage has been updated accordingly
 * Added new methods for looking up keys/values: `RadixTree.getClosestKeys` (issue 2)
 * Full test coverage
 * Deployed to Maven central

===Version 1.0.0 - 2012-07-10===
 * First public release
 * `RadixTree`, `ReversedRadixTree`, `InvertedRadixTree`, `SuffixTree`, Longest common substring solver
 * Full test coverage
 * Deployed to Maven central